//#define	DumpOncePerBfib		// dump values only once per bfib (GPS observation)

/*

	FSRWriterStata.cs - Load FSR file data into Stata
    Copyright (C) 2004, Marty Ross

	Constructs Stata script to load FSR video track data for statistical analysis
	of relationships between simulator properties.

	For more information about Stata, please browse:

		http://www.stata.com

*/

using System ;
using System.IO ;
using System.Text ;
using System.Collections ;

namespace fsrlib
{

	public class FSRWriterStata : FSRWriter
	{

		public FSRWriterStata(Stream output)
		{
			m_output= new StatWriter(output) ;
			m_simobjects= new ArrayList() ;
			m_simparams= new ArrayList() ;
			m_simvalues= new ArrayList() ;
		}


		//
		//	Realization of "FSRWriter" abstract methods
		//

		public override Chunk Start()
		{
			m_output.WriteLine("* stata script generated by FSRWriterSTAT2 class") ;
			m_output.WriteLine("*") ;
			return NewChunk() ;
		}

		public override void End(Chunk startChunk)
		{
			m_output.WriteLine("*") ;
			m_output.WriteLine("* end of script") ;
		}

		public override Chunk FsibStart()
		{
			m_output.WriteLine("* start of FSIB section") ;
			m_output.WriteLine("*") ;
			return NewChunk() ;
		}

		public override void FsibEnd(Chunk fsibChunk)
		{
			m_output.WriteLine("end") ;
			m_output.WriteLine("*") ;
			m_output.WriteLine("* end of FSIB section") ;
	
			foreach (SimParam p in m_simparams) {
				m_output.WriteLine("label var v" + p.pid + " \"" + p.pname + "\"") ;
			}

		}

		public override Chunk FsibBfibStart()
		{
#if	!DumpOncePerBfib
			m_output.WriteLine("* start of BFIB") ;
#endif
			return NewChunk() ;
		}

		public override void FsibBfibEnd(Chunk bfibChunk)
		{
#if	DumpOncePerBfib
			DumpValues() ;
#else
			m_output.WriteLine("* end of BFIB") ;
#endif
		}

		public override Chunk FsibBfibOdibStart()
		{
			return NewChunk() ;
		}

		public override void FsibBfibOdibObItem(ushort oid, string oname)
		{
			m_simobjects.Add(new SimObject(oid, oname)) ;
		}

		public override void FsibBfibOdibEnd(Chunk bfibodibChunk)
		{
			if (m_simobjects.Count == 0) return ;
			m_output.Write("label define SimObject") ;
			foreach (SimObject l in m_simobjects) {
				m_output.Write(" " + l.sid + " \"" + l.sval + "\"") ;
			}
			m_output.WriteLine() ;
		}

		public override Chunk FsibBfibPdibStart()
		{
			return NewChunk() ;
		}

		public override void FsibBfibPdibPrItem(
			ushort oid,
			ushort pid,
			ushort tid,
			string punits,
			string pname
		) {
			m_simparams.Add(new SimParam(oid, pid, tid, punits, pname)) ;
		}

		public override void FsibBfibPdibEnd(Chunk bfibpdibChunk)
		{

			if (m_simparams.Count == 0) return ;

			bool bHasBool= false ;
			foreach (SimParam p in m_simparams) {
				if (p.tid == (ushort) FSRPropertyDataType.Bool) {
					bHasBool= true ;
				}
			}

			if (bHasBool) {
				m_output.WriteLine("label define bool 0 False 1 True") ;
			}

			m_output.Write("input") ;
			foreach (SimParam p in m_simparams) {

				switch(p.tid) {

					case (ushort) FSRPropertyDataType.Bool:
						m_output.Write(" byte") ;
						break ;

					case (ushort) FSRPropertyDataType.Double:
						m_output.Write(" double") ;
						break ;

					case (ushort) FSRPropertyDataType.Int:
						m_output.Write(" long") ;
						break ;

					case (ushort) FSRPropertyDataType.String:
						m_output.Write(" str240") ;
						break ;
				}

				m_output.Write(" v" + p.pid) ;

				if (p.tid == (ushort) FSRPropertyDataType.Bool) {
					m_output.Write(":bool") ;
				}

			}

			if (bHasBool) {
				m_output.WriteLine(", label") ;
			}
			else {
				m_output.WriteLine() ;
			}
		}

		public override Chunk FsibBfibFribStart()
		{
			m_simvalues.Clear() ;
			return NewChunk() ;
		}

		public override void FsibBfibFribTsItem(uint frno, uint ticks, long timeval)
		{
			m_frno= frno ;
			m_frticks= ticks ;
			m_frtimeval= timeval ;
		}

		public override void FsibBfibFribFrItem(ushort oid, ushort pid, ushort tid, Object o)
		{
			m_simvalues.Add(new SimValue(pid, o)) ;
		}

		public override void FsibBfibFribEnd(Chunk bfibfribChunk)
		{
#if	!DumpOncePerBfib
			DumpValues() ;
#endif
		}

		public override Chunk FsibTrailerStart()
		{
			return NewChunk() ;
		}

		public override void FsibTrailerDaItem(ushort dtype, string dval)
		{
		}

		public override void FsibTrailerEnd(Chunk trailerChunk)
		{
		}


		//
		//
		//

		Chunk NewChunk()
		{
			// no use for chunks here
			return null ;
		}

		internal class StatWriter : TextWriter
		{
			internal StatWriter(Stream output)
			{
				m_output= output ;
			}
			public override void Write(char c)
			{
				m_output.WriteByte((byte) c) ;
			}
			public override Encoding Encoding {
				get {
					return(Encoding.ASCII) ;
				}
			}
			Stream m_output ;
		}


		//
		//
		//
		private void DumpValues()
		{
			foreach (SimParam p in m_simparams) {
				bool b= false ;
				foreach (SimValue v in m_simvalues) {
					if (v.pid == p.pid) {
						m_output.Write(v.sval.ToString() + " ") ;
						b= true ;
						break ;
					}
				}
				if (!b) m_output.Write(". ") ;
			}
			m_output.WriteLine() ;
		}


		//
		//
		//

		StatWriter m_output ;

		uint m_frno ;
		uint m_frticks ;
		long m_frtimeval ;

		ArrayList m_simobjects ;
		ArrayList m_simparams ;
		ArrayList m_simvalues ;

	}
}
