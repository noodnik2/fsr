//#define	DumpOncePerBfib		// dump values only once per bfib (GPS observation)

/*

	FSRWriterSTAT2.cs - Output basic subset of data to Stata
    Copyright (C) 2003, Marty Ross


	This module writes a Stata(tm) ".do" file for loading basic information
	from the FSR-class stream that is written through it into Stata for
	subsequent statistical analyses.

*/


using System ;
using System.IO ;
using System.Text ;

namespace fsrlib
{

	public class FSRWriterSTAT2 : FSRWriter
	{

		public FSRWriterSTAT2(Stream output)
		{
			m_output= new StatWriter(output) ;
		}


		//
		//	Realization of "FSRWriter" abstract methods
		//

		public override Chunk Start()
		{
			m_output.WriteLine("* stata script generated by FSRWriterSTAT2 class") ;
			m_output.WriteLine("*") ;
			return NewChunk() ;
		}

		public override void End(Chunk startChunk)
		{
			m_output.WriteLine("*") ;
			m_output.WriteLine("macro define abstime = " + m_abstime0) ;
			m_output.WriteLine("*") ;
			m_output.WriteLine("* end of script") ;
		}

		public override Chunk FsibStart()
		{
			m_output.WriteLine("* start of FSIB section") ;
			m_output.WriteLine("*") ;
			m_output.WriteLine("input float sec float lat float lon float alt float as float hd") ;
			return NewChunk() ;
		}

		public override void FsibEnd(Chunk fsibChunk)
		{
			m_output.WriteLine("end") ;
			m_output.WriteLine("*") ;
			m_output.WriteLine("* end of FSIB section") ;
		}

		public override Chunk FsibBfibStart()
		{
#if	!DumpOncePerBfib
			m_output.WriteLine("* start of BFIB") ;
#endif
			return NewChunk() ;
		}

		public override void FsibBfibEnd(Chunk bfibChunk)
		{
#if	DumpOncePerBfib
			DumpValues() ;
#else
			m_output.WriteLine("* end of BFIB") ;
#endif
		}

		public override Chunk FsibBfibOdibStart()
		{
			return NewChunk() ;
		}

		public override void FsibBfibOdibObItem(ushort oid, string oname)
		{
		}

		public override void FsibBfibOdibEnd(Chunk bfibodibChunk)
		{
		}

		public override Chunk FsibBfibPdibStart()
		{
			return NewChunk() ;
		}

		public override void FsibBfibPdibPrItem(
			ushort oid,
			ushort pid,
			ushort tid,
			string punits,
			string pname
		) {
		}

		public override void FsibBfibPdibEnd(Chunk bfibpdibChunk)
		{
		}

		public override Chunk FsibBfibFribStart()
		{
			return NewChunk() ;
		}

		public override void FsibBfibFribTsItem(uint frno, uint ticks, long timeval)
		{
		}

		public override void FsibBfibFribFrItem(ushort oid, ushort pid, ushort tid, Object o)
		{

			if (pid == (ushort) FSRPropertyId.ABSOLUTE_TIME) {
				m_abstime= (double) o ;
				if (m_abstime0 == 0) {
					m_abstime0= m_abstime ;
				}
				m_abstime-= m_abstime0 ;	// shift to zero-based
			}

			if (pid == (ushort) FSRPropertyId.PLANE_LATITUDE) {
				m_lat= (double) o ;
			}

			if (pid == (ushort) FSRPropertyId.PLANE_LONGITUDE) {
				m_lon= (double) o ;
			}

			if (pid == (ushort) FSRPropertyId.PLANE_ALTITUDE) {
				m_alt= (double) o ;
			}

			if (pid == (ushort) FSRPropertyId.AIRSPEED_INDICATED) {
				m_airspeed= (double) o ;
			}

			if (pid == (ushort) FSRPropertyId.PLANE_HEADING_DEGREES_TRUE) {
				m_hdg= (double) o ;
			}

		}

		public override void FsibBfibFribEnd(Chunk bfibfribChunk)
		{
#if	!DumpOncePerBfib
			DumpValues() ;
#endif
		}

		public override Chunk FsibTrailerStart()
		{
			return NewChunk() ;
		}

		public override void FsibTrailerDaItem(ushort dtype, string dval)
		{
		}

		public override void FsibTrailerEnd(Chunk trailerChunk)
		{
		}


		//
		//
		//

		Chunk NewChunk()
		{
			// no use for chunks here
			return null ;
		}

		internal class StatWriter : TextWriter
		{
			internal StatWriter(Stream output)
			{
				m_output= output ;
			}
			public override void Write(char c)
			{
				m_output.WriteByte((byte) c) ;
			}
			public override Encoding Encoding {
				get {
					return(Encoding.ASCII) ;
				}
			}
			Stream m_output ;
		}


		//
		//
		//
		private void DumpValues()
		{
			m_output.WriteLine(
				m_abstime
			      + " " + m_lat
			      + " " + m_lon
			      + " " + m_alt
			      + " " + m_airspeed
			      + " " + m_hdg
			) ;
		}


		//
		//
		//

		StatWriter m_output ;

		double m_abstime0= 0 ;			
		double m_abstime= 0 ;			
		double m_lat= 0 ;
		double m_lon= 0 ;
		double m_alt= 0 ;
		double m_airspeed= 0 ;
		double m_hdg= 0 ;

	}
}
